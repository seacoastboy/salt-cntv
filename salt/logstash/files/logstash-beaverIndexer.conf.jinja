input {
  redis {
    host => '{{ pillar["logstash"]["logstash-beaverIndexer"]["redisIp"] }}'
    port => '{{ pillar["logstash"]["logstash-beaverIndexer"]["redisPort"] }}'
    data_type => 'list' 
    key => 'logstash:beaver'
    type => 'beaverLog'
    threads => 8
  }
}

filter {
  if [type] == "apiWebLog" {
    grok {
      patterns_dir => "/opt/logstash/etc/grok-patterns"
      match => { "message" => "%{apiWebLog}" }
      tag_on_failure => ["_grokFail"]
    }
    geoip {
      source => "clientip"
      add_tag => ["geoip"]
      database => "/opt/logstash/etc/GeoLiteCity.dat"
    }
  }
  if [type] == "weiboSinaSync2Cntv" {
    grok {
      patterns_dir => "/opt/logstash/etc/grok-patterns"
      match => { "message" => "%{SINA2CNTVLOG}" }
      tag_on_failure => ["_grokFail"]
    }
  }
  if [type] == "userCenterWebLog" {
    grok {
      patterns_dir => "/opt/logstash/etc/grok-patterns"
      match => { "message" => "%{COMBINEDAPACHELOGUSERCENTER}" }
      tag_on_failure => ["_grokFail"]
    }
    #date {
    #  match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    #}
    grep {
      match => [ "request", ".gif$|.png$|.jpg$|.js$" ]
      negate => true
    }
  }
  if [type] == "weiboWebLog" {
    grok {
      patterns_dir => "/opt/logstash/etc/grok-patterns"
      match => { "message" => "%{COMBINEDAPACHELOGWEIBO}" }
      tag_on_failure => ["_grokFail"]
    }
    grep {
      match => [ "request", ".gif$|.png$|.jpg$|.js$" ]
      negate => true
    }
  }
  if [type] == "mySyslog" {
    grok {
      patterns_dir => "/opt/logstash/etc/grok-patterns"
      match => { "message" => "%{MYSYSLOG}" }
      tag_on_failure => ["_grokFail"]
    }
    syslog_pri { }
    mutate {
        remove_field => [ "syslog_pri", "syslog_facility", "syslog_facility_code" ]
    }
    if [syslog_program] == "audit.hist" {
      grok {
        patterns_dir => "/opt/logstash/etc/grok-patterns"
        match => { "syslog_message" => "%{MYAUDITLOG}" }
        tag_on_failure => ["_grokFail"]
        add_tag => ["_auditLog"]
      }
      mutate {
        replace => [ "type", "mySyslog-auditLog" ]
      }
    }
  }
}

output { 
  #elasticsearch_http {	host => "x.x.x.x"
  #workers => 4}
  
  #if [type] == "weiboSinaSync2Cntv" {
  #  stdout { codec => rubydebug }
  #}
  
  if [type] == "mySyslog-auditLog" {
    elasticsearch { 
      #host => "x.x.x.x"
      index => "logstash-syslog-auditlog-%{+YYYY.MM}"
      cluster => "elasticsearch-test-cluster"
      node_name => "indexer-{{ grains['id'] }}-beaver"
      flush_size => 2000
      idle_flush_time => 5
    }
  }
  else {
    elasticsearch {
      #host => "x.x.x.x"
      workers => 1
      cluster => "elasticsearch-test-cluster"
      node_name => "indexer-{{ grains['id'] }}-beaver"
      flush_size => 2000
      idle_flush_time => 5
      template => "/opt/logstash/etc/logstash-2.json"
      template_overwrite => true
      #template_overwrite => false
    }
  }
}

